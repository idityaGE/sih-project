generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int         @id @default(autoincrement())
  name             String
  email            String      @unique
  password         String
  phone            String
  address          String?
  departmentId     Int
  department       Department  @relation(fields: [departmentId], references: [id])
  role             Role
  status           UserStatus  @default(ACTIVE)
  projects         Project[]   @relation("UserProjects")
  forumPosts       ForumPost[]
  workshops        Workshop[]  @relation("UserWorkshops")
  meetings         Meeting[] // Added this line
  headOfDepartment Department? @relation("DepartmentHead")
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Department {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  location    String?
  headId      Int?             @unique
  head        User?            @relation("DepartmentHead", fields: [headId], references: [id])
  users       User[]
  projects    Project[]
  resources   Resource[]
  tasks       Task[]           @relation("DepartmentTasks")
  reports     Report[]         @relation("DepartmentReports")
  forums      Forum[]          @relation("DepartmentForums")
  meetings    Meeting[]
  status      DepartmentStatus @default(ACTIVE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Project {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  location     String?
  startDate    DateTime
  endDate      DateTime?
  status       ProjectStatus  @default(PLANNING)
  budget       Float
  departmentId Int
  department   Department     @relation(fields: [departmentId], references: [id])
  users        User[]         @relation("UserProjects")
  siteId       Int
  site         Site           @relation(fields: [siteId], references: [id])
  phases       ProjectPhase[]
  resources    Resource[]
  meetings     Meeting[] // Added this line
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Site {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  location    String
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProjectPhase {
  id        Int         @id @default(autoincrement())
  name      String
  startDate DateTime
  endDate   DateTime?
  status    PhaseStatus @default(PENDING)
  projectId Int
  project   Project     @relation(fields: [projectId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Meeting {
  id           Int        @id @default(autoincrement())
  topic        String
  description  String?
  date         DateTime
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  projectId    Int
  project      Project    @relation(fields: [projectId], references: [id])
  participants User[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Resource {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  quantity     Int
  type         ResourceType
  departmentId Int
  department   Department     @relation(fields: [departmentId], references: [id])
  projectId    Int? // Added this line
  project      Project?       @relation(fields: [projectId], references: [id]) // Added this line
  status       ResourceStatus @default(AVAILABLE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Task {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  status      TaskStatus   @default(PENDING)
  departments Department[] @relation("DepartmentTasks")
  reports     Report[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Report {
  id           Int        @id @default(autoincrement())
  name         String
  title        String
  description  String?
  date         DateTime
  departmentId Int
  department   Department @relation("DepartmentReports", fields: [departmentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  taskId       Int?
  task         Task?      @relation(fields: [taskId], references: [id])
}

model Forum {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  sections     ForumSection[]
  departmentId Int
  department   Department     @relation("DepartmentForums", fields: [departmentId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ForumSection {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  forumId     Int
  forum       Forum       @relation(fields: [forumId], references: [id])
  posts       ForumPost[]
  accessLevel AccessLevel @default(PUBLIC)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ForumPost {
  id        Int          @id @default(autoincrement())
  title     String
  content   String
  sectionId Int
  section   ForumSection @relation(fields: [sectionId], references: [id])
  authorId  Int
  author    User         @relation(fields: [authorId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Workshop {
  id           Int      @id @default(autoincrement())
  title        String
  description  String?
  date         DateTime
  participants User[]   @relation("UserWorkshops")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  ADMIN
  OFFICER
  EMPLOYEE
  TECHNICAL_EXPERT
}

enum DepartmentStatus {
  ACTIVE
  INACTIVE
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum ProjectStatus {
  ON_GOING
  COMPLETED
  REJECTED
  PLANNING
  ON_HOLD
}

enum PhaseStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ResourceType {
  HUMAN
  TECHNICAL
  DATA
  OTHER
}

enum ResourceStatus {
  AVAILABLE
  IN_USE
  REPAIRING
  DISPOSED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

enum AccessLevel {
  PUBLIC
  PRIVATE
  DEPARTMENT_ONLY
}